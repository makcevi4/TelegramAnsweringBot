import json
import platform
import subprocess
import sys
import pytz

from datetime import datetime
from requests.exceptions import ConnectionError, ReadTimeout
from urllib3.exceptions import MaxRetryError, NewConnectionError


def getting_message_via_os():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∫–æ–º–º–∞–Ω–¥—É) –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    os = platform.system()
    if os == 'Linux':
        return 'python3'
    if os == 'Windows':
        return 'python'


def do_command(command=None, file='register.py'):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥.
    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    if command:
        subprocess.run([command, file])
    else:
        command = getting_message_via_os()
        subprocess.run([command, file])


def handling_connection_error(function_for_handling):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º —Å–µ—Ç–∏:
    –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å,
    –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫,
    –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ,
    """
    try:
        function_for_handling()
    except (ConnectionError, MaxRetryError, NewConnectionError, TypeError) as error:
        message = "\n - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
        print(message + "\n")

        logging(message, error)
        logging(' -–ë–æ—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω', '–û—à–∏–±–∫–∞ –æ–ø–∏—Å–∞–Ω–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ª–æ–≥–µ', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º')
        sys.exit()
    except TimeoutError as error:
        message = "\n - –¢–∞–π–º-–∞—É—Ç"
        print(message + "\n")
        logging(message, error)
        sys.exit()

    else:
        print(" - –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º –∑–∞–ø—É—â–µ–Ω!")


def handling_error(function_for_handling):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—à–∏–±–∫–∏: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤, –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã'"""
    try:
        function_for_handling()
    except TypeError as error:
        message = "\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏!"\
                        "\n–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"\
                        "\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ "\
                        "–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"\
                        " –∏–ª–∏ —Å–ø–µ—Ä–≤–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∞ –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É."
        print(message + "\n")

        logging(message, error)
        logging(' -–ë–æ—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω', '–û—à–∏–±–∫–∞ –æ–ø–∏—Å–∞–Ω–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ª–æ–≥–µ', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º')
        sys.exit()


def logging(message, error, status='–û—à–∏–±–∫–∞'):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    path = 'data/logs.txt'
    timezone = load_data('data/config-bot.json')['my_TZ']
    number = int(get_number_of_log()[1:])

    logged = "\n#{}" \
             "\n–°–¢–ê–¢–£–°: {}" \
             "\n–î–ê–¢–ê: {}" \
             "\n–°–û–û–ë–©–ï–ù–ò–ï: '{}'" \
             "\n–û–®–ò–ë–ö–ê: {}" \
             "\n".format(number + 1, status, datetime.now().strftime("%d.%m.%Y - %H:%M:%S"), message[2:], error)

    if timezone:
        logged = "\n#{}" \
                 "\n–°–¢–ê–¢–£–°: {}" \
                 "\n–î–ê–¢–ê: {}" \
                 "\n–°–û–û–ë–©–ï–ù–ò–ï: '{}'" \
                 "\n–û–®–ò–ë–ö–ê: {}" \
                 "\n".format(number + 1,
                             status,
                             datetime.now(tz=pytz.timezone(timezone)).strftime("%d.%m.%Y - %H:%M:%S"),
                             message[2:],
                             error)

    write_data('rw', path, logged)


def load_logs():
    with open('data/logs.txt', 'r') as file:
        return file.readlines()[-29:]


def show_logs():
    text = ''
    logs = load_logs()
    for item in logs:
        text += item
    return text


def creating_files(*args):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ñ–∞–π–ª–æ–≤"""
    files = list(args)
    for filename in files:
        if '.json' in filename:
            with open(filename, 'w') as file:
                json.dump(file, '')
        if '.txt' in filename:
            with open(filename, 'w') as file:
                file.write("")


def creating_file(filename, t_json='', t_txt=''):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    if '.json' in filename:
        with open(filename, 'w') as file:
            json.dump(file, t_json)
    if '.txt' in filename:
        with open(filename, 'a') as file:
            file.write(t_txt)


# - –î–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞


def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∞–π–ª–∞ —Ç–∏–ø–∞ json"""
    try:
        with open(filename, 'r') as file:
            return json.load(file)
    except FileNotFoundError as error:
        message = "\n - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        print(message + "\n")

        logging(message, error)


def get_number_of_log():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞"""
    try:
        with open('data/logs.txt', 'r') as file:
            return file.readlines()[-5]
    except IndexError:
        return "#0"


def write_data(status, filename, data=''):
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö"""
    if status == 'w':
        with open(filename, 'w') as file:
            file.write(data)
    if status == 'rw':
        with open(filename, 'a') as file:
            file.write(data)


def formatting_dictionary_data(dictionary):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π, –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    text = ""
    i = 1
    for user_name, user_id in dictionary.items():
        text += "\nüë§<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ{}</b>\nüìÉ–ò–º—è: {}\nüîîID: {}\n".format(i, user_name, user_id)
        i += 1
    return text


def formatting_list_data(list_):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ –±–æ—Ç–æ–º"""
    amount = len(list_)
    if amount == 0:
        return "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
    else:
        text = '–í —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ %s —á–µ–ª–æ–≤–µ–∫\n' % amount
        i = 1
        for item in list_:
            text += "\nID ‚Ññ{}\n{}\n".format(i, item)
            i += 1
        return text


# - –î–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞


def formatting_time_answer(got_time, status='s'):
    """ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    if got_time in range(11, 15):
        f_time = int(str(got_time)[-2:])
    else:
        f_time = int(str(got_time)[-1])

    seconds = ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥']
    minutes = ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç']
    hours = ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']
    days = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']

    def handling(item, g_time):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞"""
        if g_time == 1:
            return item[0]
        if g_time in range(2, 5):
            return item[1]
        if g_time in range(11, 15):
            return item[2]
        else:
            return item[2]

    if status == 's':
        result = handling(seconds, f_time)
        return "{} {}".format(got_time, result)
    if status == 'm':
        result = handling(minutes, f_time)
        return "{} {}".format(got_time, result)
    if status == 'h':
        result = handling(hours, f_time)
        return "{} {}".format(got_time, result)
    if status == 'd':
        result = handling(days, f_time)
        return "{} {}".format(got_time, result)


def flood_wait_error(error_time):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
    if error_time < 60:
        return formatting_time_answer(error_time, 's')
    if 60 < error_time < 3600:
        error_time = error_time // 60
        return formatting_time_answer(error_time, 'm')
    if 3600 < error_time < 86400:
        error_time = error_time // 60 // 60
        return formatting_time_answer(error_time, 'h')
    if 86400 <= error_time:
        error_time = error_time // 60 // 60 // 24
        return formatting_time_answer(error_time, 'd')


