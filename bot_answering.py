import json
import time
import random
import datetime
import pytz

import functions

from pyrogram import Client, MessageHandler
from pyrogram import errors


from cryptography.fernet import Fernet, InvalidToken


class AnsweringBot:
    """–ö–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"""
    def __init__(self, session='–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
        self.session = session
        self.status = False
        self.mode = 'friends'

        self.__ID = None
        self.__HASH = None
        self.__PHONE = None
        self.__PASSWORD = None

        self.PATH = 'data/'
        self.BOT_CONFIG = self.PATH + 'config-bot.json'
        self.CONFIG = self.PATH + 'config-auth.json'
        self.SETUPS = self.PATH + 'setups.json'
        self.BLACKLIST = self.PATH + 'blacklist.json'
        self.USERS = self.PATH + 'users.json'

        self.MY_ID = self.__load_file(self.BOT_CONFIG)['my_ID']
        self.BOT_ID = self.__load_file(self.BOT_CONFIG)['ID']
        self.TIMEZONE = self.__load_file(self.BOT_CONFIG)['my_TZ']
        self.DISABLED = []

    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

    @staticmethod
    def __load_file(file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            with open(file, 'r') as of:
                return json.load(of)
        except FileNotFoundError as error:
            message = "\n -–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∏—Ö!"
            print(message + "\n")

            functions.logging(message, error)
            functions.do_command()

    #  –ì–õ–ê–í–ù–´–ï –ú–ï–¢–û–î–´

    def __auth(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = "\n-–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (ID/HASH/PHONE or PASSWORD)" \
                  "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑!!"

        if self.__PASSWORD:
            try:
                return Client(session_name=self.session,
                              api_id=self.__ID,
                              api_hash=self.__HASH,
                              phone_number=self.__PHONE,
                              password=self.__PASSWORD)
            except errors.RPCError as error:
                print(message + "\n")

                functions.logging(message, error)
        else:
            try:
                return Client(session_name=self.session,
                              api_id=self.__ID,
                              api_hash=self.__HASH,
                              phone_number=self.__PHONE)
            except errors.RPCError as error:
                print(message + "\n")

                functions.logging(message, error)

    def __decrypt(self):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""

        def organize(got_dict):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Å–ø–∏—Å–æ–∫"""
            organized_list = []
            for item in got_dict.keys():
                organized_list.append(item)
            return organized_list

        def key_definition(keys_list, config_list):
            """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"""
            random_number = random.randint(0, 1)
            if random_number == 0:
                return config_list[keys_list[-2]]
            if random_number == 1:
                key_number = config_list[keys_list[-1]] - (config_list[keys_list[-1]] - config_list[keys_list[-2]])

                return key_number

        config = self.__load_file(self.CONFIG)
        setups = self.__load_file(self.SETUPS)

        organized = organize(config)

        i = 0
        c = len(organized) - 2

        while i < c:

            number = key_definition(organized, config)
            key = organized[i]

            decrypted_item = Fernet(setups[number + i].encode('utf-8')).decrypt(config[key].encode('utf-8')).decode(
                'utf-8')

            if key == 'id'.upper():
                self.__ID = decrypted_item
            if key == 'hash'.upper():
                self.__HASH = decrypted_item
            if key == 'phone'.upper():
                self.__PHONE = decrypted_item
            if key == 'password'.upper():
                self.__PASSWORD = decrypted_item
            i += 1

    # –ó–ê–ü–£–°–ö

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
        def auto_blocking():
            """
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–±—è –∏ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ç–æ–≥–æ,
            —á—Ç–æ–± –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            """
            black_list = self.__load_file(self.BLACKLIST)
            if self.MY_ID and self.BOT_ID in black_list:
                pass
            else:
                black_list.append(self.MY_ID)
                black_list.append(self.BOT_ID)
                with open(self.BLACKLIST, 'w') as file:
                    json.dump(black_list, file)

        def handling_errors(function_for_handling):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç—É—Ç—Å—Ç–≤–∏–µ API –∫–ª—é—á–∞"""
            try:
                function_for_handling()
            except errors.FloodWait as error:
                message = "- –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤,"\
                          " —á—Ç–æ–± –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –æ–∂–∏–¥–∞–π—Ç–µ %s" % functions.flood_wait_error(error.x)
                print(message + "\n")

                functions.logging(message, error)

            except AttributeError as error:
                message = "- –ù–µ –Ω–∞–π–¥–µ—Ç –∫–ª—é—á API"
                print(message + "\n")

                functions.logging(message, error)

        def handling_message(msg):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç ID –≥—Ä—É–ø–ø—ã"""
            if len(str(msg)) < 11:
                return msg
            else:
                return False

        def check_for_friend(user, user_dict):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π"""
            if user in user_dict.values():
                return True
            else:
                return False

        def check_for_banned(sender, black_list):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
            if sender in black_list:
                return True
            else:
                return False

        def main_check(user, bl, ul):
            """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π"""
            try:
                banned = check_for_banned(user, bl)
                in_friend_list = check_for_friend(user, ul)
                return banned, in_friend_list
            except AttributeError as error:
                functions.logging("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", error)
                return 0

        def get_message_via_time():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–Ω–∏"""
            if self.TIMEZONE:
                current_time = int(datetime.datetime.now(tz=pytz.timezone(self.TIMEZONE)).strftime('%H'))
            else:
                current_time = int(datetime.datetime.now().strftime('%H'))
            if 0 <= current_time <= 9 or 21 <= current_time <= 23:
                return "–Ø —Å–ø–ª—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ!"
            else:
                return "–Ø —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ!ü§∑‚Äç‚ôÇÔ∏è"

        def scenario_all(uid, msg):
            message = get_message_via_time()
            application.send_message(uid, message)
            time.sleep(1)

        def scenario_friends(uid, msg, login):
            if ('–í–ê–ñ–ù–û' or '!–í–ê–ñ–ù–û') in msg.upper():
                if len(msg) > 6:
                    message = "–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è –ø—Ä–æ—á—Ç—É –ø–µ—Ä–≤—ã–º, –∫–∞–∫ –æ—Å–≤–æ–±–æ–∂—É—Å—å."
                    important_message = "üë§: {}\nüì©: {}".format(("@" + login), msg[6:])
                    application.send_message(uid, message)
                    application.send_message('me', important_message)
                    functions.logging('  –ü–æ–ª—É—á–µ–Ω–æ –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{}'.format(login),
                                      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                                      '–ü–æ–ª—É—á–µ–Ω–æ –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                else:
                    message = "–¢—ã –∑–∞–±—ã–ª –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –ø–æ—Å–ª–µ –ø–æ–º–µ—Ç–∫–∏ '!–í–ê–ñ–ù–û'. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
                    application.send_message(uid, message)
            else:
                message = get_message_via_time()
                message += "\n–ï—Å–ª–∏ —É —Ç–µ–±—è —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤—å: \n'!–í–ê–ñ–ù–û <–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>'"
                application.send_message(uid, message)
                time.sleep(1)

        def handling_notifications(status):
            if status:
                # disable notifications
                #
                # application.forward_messages()
                pass
            else:
                # enable notifications
                pass

        # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.__decrypt()

        # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        users = self.__load_file(self.USERS)
        blacklist = self.__load_file(self.BLACKLIST)

        # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        application = self.__auth()

        # –±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ–±—è –∏ –±–æ—Ç–∞, —á—Ç–æ–± –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        auto_blocking()

        while True:
            if self.status:
                application.start()
                functions.logging(' -–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞')
                break

        while True:
            if self.status:

                @handling_errors
                def handled_answering():
                    @application.on_message()
                    def answering(client, message):
                        try:

                            user_id = handling_message(message.from_user.id)
                            banned, in_friend_list = main_check(user_id, blacklist, users)

                        except AttributeError:
                            pass
                        else:
                            if self.mode == 'friends':
                                if not banned and in_friend_list:
                                    scenario_friends(user_id, message.text, message.from_user.username)
                                    print(message)

                            if self.mode == 'all':
                                if not banned:
                                    if in_friend_list:
                                        scenario_friends(user_id, message.text, message.from_user.username)
                                    else:
                                        scenario_all(user_id, message.text)

            time.sleep(2)

            if not self.status:
                application.stop()
                functions.logging(' -–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞')
                break
